syntax = "proto3";

package viot;

service FEngineExecutor {
  rpc Execute(Script) returns (Result) {}
  rpc AddService(ThingMethod) returns (Result) {}
  rpc UpdateService(ThingMethod) returns (Result) {}
  rpc DeleteService(ThingMethod) returns (Result) {}

}

service FEngineThing {
  rpc ResolveService(ScriptRequest) returns (Script) {}
}

service FEngineData {
  rpc Select(SelectRequest) returns (Script) {}
  rpc Insert(InsertRequest) returns (Script) {}
  rpc Update(UpdateRequest) returns (Script) {}
  rpc Delete(DeleteRequest) returns (Script) {}
}


//#endregion FEngineExecutor
message Script {
  string function = 1;
  map<string, Function> services = 2;
  map<string, Function> subscription = 3;
}

message ThingMethod {
  bytes thingID = 1;
  map<string, Function> services = 2;
  map<string, Function> subscription = 3;
}

message Subscription {

}

message Function {
  repeated Argument input = 1;
  Argument output = 2;
  string code = 3;
}

message Result {
  Argument output = 1;
  repeated Argument attributes = 3;
}

message UpdateScript {

}

message Parameter {
  string name = 1;
  Type type = 2;
}

message Argument {
  string name = 1;
  Type type = 2;
  oneof value {
    int32  i32 = 3;
    int64  i64 = 4;
    float  f32 = 5;
    double f64 = 6;
    bool   bool = 7;
    string json = 8;
    string string = 9;
    bytes  binary = 10;
  }
}

enum Type {
  i32 = 0;
  i64 = 1;
  f32 = 2;
  f64 = 3;
  bool = 4;
  json = 5;
  string = 6;
  binary = 7;
}
//#endregion FEngineExecutor

//#region FEngineData
message ScriptRequest {

}

message SelectRequest {
  string table = 1;
  repeated string fieldNames = 2;
  string filter = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message InsertRequest {
  string table = 1;
  repeated Argument fieldNames = 2;
}

message UpsertRequest {
  string table = 1;
  repeated Argument fieldNames = 2;
}

message UpdateRequest {
  string table = 1;
  repeated Argument fieldNames = 2;
  string filter = 3;
}

message DeleteRequest {
  string table = 1;
  string filter = 2;
}

enum LogicRelation {
  AND = 0;
  OR = 1;
}
//#endregion FEngineData
