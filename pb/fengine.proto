syntax = "proto3";

package viot;

service FEngineExecutor {
  rpc Execute(Script) returns (Result) {}
  rpc AddService(ThingMethod) returns (Result) {}
  rpc UpdateService(ThingMethod) returns (Result) {}
  rpc DeleteService(ThingMethod) returns (Result) {}
}

service FEngineThing {
  //rpc ResolveService(ScriptRequest) returns (Result) {}
}

service FEngineData {
  rpc Select(SelectRequest) returns (SelectResult) {}
  rpc Insert(InsertRequest) returns (InsertResult) {}
  rpc Update(UpdateRequest) returns (UpdateResult) {}
  rpc Delete(DeleteRequest) returns (DeleteResult) {}
}


//#endregion FEngineExecutor
message Script {
  MethodInfo method = 1;
  repeated Variable attributes = 2;
  map<string, Function> services = 3;
  map<string, Function> subscription = 4;
}

message MethodInfo {
  bytes thing_id = 1;
  string name = 2;
  MethodType type = 3;
  repeated Variable input = 4;
}

enum MethodType {
  service = 0;
  subscription = 1;
}

message ThingMethod {
  MethodInfo methodId = 1;
  map<string, Function> services = 2;
  map<string, Function> subscription = 3;
}

message Subscription {

}

message Function {
  repeated Parameter input = 1;
  Type output = 2;
  string code = 3;
}

message Result {
  Error error = 1;
  Variable output = 2;
  repeated Variable attributes = 3;
}

message Error {
  int32 code = 1;
  string message = 2;
}

message UpdateScript {

}

message Parameter {
  string name = 1;
  Type   type = 2;
}

message Variable {
  string name = 1;
  Type   type = 2;
  oneof value {
    int32  i32 = 3;
    int64  i64 = 4;
    float  f32 = 5;
    double f64 = 6;
    bool   bool = 7;
    string json = 8;
    string string = 9;
    bytes  binary = 10;
  }
}

message Value {
  oneof value {
    int32  i32 = 1;
    int64  i64 = 2;
    float  f32 = 3;
    double f64 = 4;
    bool   bool = 5;
    string json = 6;
    string string = 7;
    bytes  binary = 8;
  }
}

enum Type {
  i32 = 0;
  i64 = 1;
  f32 = 2;
  f64 = 3;
  bool = 4;
  json = 5;
  string = 6;
  binary = 7;
}

//#endregion



message SelectRequest {
  string table = 1;
  repeated string field = 2;
  string filter = 3;
  int32 limit = 4;
  int32 offset = 5;
  repeated string group_by = 6;
  repeated OrderBy order_by = 7;

  message OrderBy {
    string field = 1;
    bool ascending = 2;
  }
}

message SelectResult {
  int32 code = 1;
  repeated string column = 2;
  repeated ResultRow row = 3;
}

message ResultRow {
  repeated Value value = 1;
}

message InsertRequest {
  string table = 1;
  repeated DataRow row = 2;
}

message InsertResult {
  int32 affected_row = 1;
}

message DataRow {
  repeated Variable values = 1;
}

message UpsertRequest {
  string table = 1;
  repeated Variable field = 2;
}

message UpdateRequest {
  string table = 1;
  repeated Variable field = 2;
  string filter = 3;
}

message UpdateResult {
  int32 affected_row = 1;
}

message DeleteRequest {
  string table = 1;
  string filter = 2;
}

message DeleteResult {
  int32 affected_row = 1;
}

//#endregion
