// source: pb/fengine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.viot.DeleteRequest', null, global);
goog.exportSymbol('proto.viot.Function', null, global);
goog.exportSymbol('proto.viot.InsertRequest', null, global);
goog.exportSymbol('proto.viot.Result', null, global);
goog.exportSymbol('proto.viot.Script', null, global);
goog.exportSymbol('proto.viot.ScriptRequest', null, global);
goog.exportSymbol('proto.viot.SelectRequest', null, global);
goog.exportSymbol('proto.viot.Type', null, global);
goog.exportSymbol('proto.viot.UpdateRequest', null, global);
goog.exportSymbol('proto.viot.UpdateScript', null, global);
goog.exportSymbol('proto.viot.Variable', null, global);
goog.exportSymbol('proto.viot.Variable.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.Script = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viot.Script.repeatedFields_, null);
};
goog.inherits(proto.viot.Script, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.Script.displayName = 'proto.viot.Script';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.viot.Function.repeatedFields_, null);
};
goog.inherits(proto.viot.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.Function.displayName = 'proto.viot.Function';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.Result.displayName = 'proto.viot.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.UpdateScript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.UpdateScript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.UpdateScript.displayName = 'proto.viot.UpdateScript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.viot.Variable.oneofGroups_);
};
goog.inherits(proto.viot.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.Variable.displayName = 'proto.viot.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.ScriptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.ScriptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.ScriptRequest.displayName = 'proto.viot.ScriptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.SelectRequest.displayName = 'proto.viot.SelectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.InsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.InsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.InsertRequest.displayName = 'proto.viot.InsertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.UpdateRequest.displayName = 'proto.viot.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.viot.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.viot.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.viot.DeleteRequest.displayName = 'proto.viot.DeleteRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viot.Script.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.Script.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.Script.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.Script} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Script.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.viot.Function.toObject(includeInstance, f),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.viot.Variable.toObject, includeInstance),
    refereeMap: (f = msg.getRefereeMap()) ? f.toObject(includeInstance, proto.viot.Function.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.Script}
 */
proto.viot.Script.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.Script;
  return proto.viot.Script.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.Script} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.Script}
 */
proto.viot.Script.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viot.Function;
      reader.readMessage(value,proto.viot.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = new proto.viot.Variable;
      reader.readMessage(value,proto.viot.Variable.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 3:
      var value = msg.getRefereeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.viot.Function.deserializeBinaryFromReader, "", new proto.viot.Function());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.Script.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.Script.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.Script} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Script.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viot.Function.serializeBinaryToWriter
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.viot.Variable.serializeBinaryToWriter
    );
  }
  f = message.getRefereeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.viot.Function.serializeBinaryToWriter);
  }
};


/**
 * optional Function function = 1;
 * @return {?proto.viot.Function}
 */
proto.viot.Script.prototype.getFunction = function() {
  return /** @type{?proto.viot.Function} */ (
    jspb.Message.getWrapperField(this, proto.viot.Function, 1));
};


/**
 * @param {?proto.viot.Function|undefined} value
 * @return {!proto.viot.Script} returns this
*/
proto.viot.Script.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viot.Script} returns this
 */
proto.viot.Script.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Script.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Variable attributes = 2;
 * @return {!Array<!proto.viot.Variable>}
 */
proto.viot.Script.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.viot.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viot.Variable, 2));
};


/**
 * @param {!Array<!proto.viot.Variable>} value
 * @return {!proto.viot.Script} returns this
*/
proto.viot.Script.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.viot.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viot.Variable}
 */
proto.viot.Script.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.viot.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viot.Script} returns this
 */
proto.viot.Script.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * map<string, Function> referee = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.viot.Function>}
 */
proto.viot.Script.prototype.getRefereeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.viot.Function>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.viot.Function));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.viot.Script} returns this
 */
proto.viot.Script.prototype.clearRefereeMap = function() {
  this.getRefereeMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.viot.Function.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputList: jspb.Message.toObjectList(msg.getInputList(),
    proto.viot.Variable.toObject, includeInstance),
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.viot.Variable.toObject, includeInstance),
    code: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.Function}
 */
proto.viot.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.Function;
  return proto.viot.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.Function}
 */
proto.viot.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viot.Variable;
      reader.readMessage(value,proto.viot.Variable.deserializeBinaryFromReader);
      msg.addInput(value);
      break;
    case 2:
      var value = new proto.viot.Variable;
      reader.readMessage(value,proto.viot.Variable.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.viot.Variable.serializeBinaryToWriter
    );
  }
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.viot.Variable.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Variable input = 1;
 * @return {!Array<!proto.viot.Variable>}
 */
proto.viot.Function.prototype.getInputList = function() {
  return /** @type{!Array<!proto.viot.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viot.Variable, 1));
};


/**
 * @param {!Array<!proto.viot.Variable>} value
 * @return {!proto.viot.Function} returns this
*/
proto.viot.Function.prototype.setInputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.viot.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viot.Variable}
 */
proto.viot.Function.prototype.addInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.viot.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viot.Function} returns this
 */
proto.viot.Function.prototype.clearInputList = function() {
  return this.setInputList([]);
};


/**
 * repeated Variable output = 2;
 * @return {!Array<!proto.viot.Variable>}
 */
proto.viot.Function.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.viot.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.viot.Variable, 2));
};


/**
 * @param {!Array<!proto.viot.Variable>} value
 * @return {!proto.viot.Function} returns this
*/
proto.viot.Function.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.viot.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.viot.Variable}
 */
proto.viot.Function.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.viot.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.viot.Function} returns this
 */
proto.viot.Function.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.viot.Function.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.viot.Function} returns this
 */
proto.viot.Function.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: (f = msg.getOutput()) && proto.viot.Variable.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.viot.UpdateScript.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.Result}
 */
proto.viot.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.Result;
  return proto.viot.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.Result}
 */
proto.viot.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.viot.Variable;
      reader.readMessage(value,proto.viot.Variable.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 2:
      var value = new proto.viot.UpdateScript;
      reader.readMessage(value,proto.viot.UpdateScript.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.viot.Variable.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.viot.UpdateScript.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable output = 1;
 * @return {?proto.viot.Variable}
 */
proto.viot.Result.prototype.getOutput = function() {
  return /** @type{?proto.viot.Variable} */ (
    jspb.Message.getWrapperField(this, proto.viot.Variable, 1));
};


/**
 * @param {?proto.viot.Variable|undefined} value
 * @return {!proto.viot.Result} returns this
*/
proto.viot.Result.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viot.Result} returns this
 */
proto.viot.Result.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Result.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateScript update = 2;
 * @return {?proto.viot.UpdateScript}
 */
proto.viot.Result.prototype.getUpdate = function() {
  return /** @type{?proto.viot.UpdateScript} */ (
    jspb.Message.getWrapperField(this, proto.viot.UpdateScript, 2));
};


/**
 * @param {?proto.viot.UpdateScript|undefined} value
 * @return {!proto.viot.Result} returns this
*/
proto.viot.Result.prototype.setUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viot.Result} returns this
 */
proto.viot.Result.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Result.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.UpdateScript.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.UpdateScript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.UpdateScript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.UpdateScript.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.UpdateScript}
 */
proto.viot.UpdateScript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.UpdateScript;
  return proto.viot.UpdateScript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.UpdateScript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.UpdateScript}
 */
proto.viot.UpdateScript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.UpdateScript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.UpdateScript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.UpdateScript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.UpdateScript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.viot.Variable.oneofGroups_ = [[3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.viot.Variable.ValueCase = {
  VALUE_NOT_SET: 0,
  I32: 3,
  I64: 4,
  F32: 5,
  F64: 6,
  BOL: 7,
  STR: 8,
  BIN: 9,
  ANY: 10
};

/**
 * @return {proto.viot.Variable.ValueCase}
 */
proto.viot.Variable.prototype.getValueCase = function() {
  return /** @type {proto.viot.Variable.ValueCase} */(jspb.Message.computeOneofCase(this, proto.viot.Variable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    i32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    i64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    f32: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    f64: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    bol: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    str: jspb.Message.getFieldWithDefault(msg, 8, ""),
    bin: msg.getBin_asB64(),
    any: (f = msg.getAny()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.Variable}
 */
proto.viot.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.Variable;
  return proto.viot.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.Variable}
 */
proto.viot.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.viot.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setI64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBol(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBin(value);
      break;
    case 10:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.viot.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.viot.Type}
 */
proto.viot.Variable.prototype.getType = function() {
  return /** @type {!proto.viot.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.viot.Type} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 i32 = 3;
 * @return {number}
 */
proto.viot.Variable.prototype.getI32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setI32 = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearI32 = function() {
  return jspb.Message.setOneofField(this, 3, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasI32 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 i64 = 4;
 * @return {number}
 */
proto.viot.Variable.prototype.getI64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setI64 = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearI64 = function() {
  return jspb.Message.setOneofField(this, 4, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasI64 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float f32 = 5;
 * @return {number}
 */
proto.viot.Variable.prototype.getF32 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setF32 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearF32 = function() {
  return jspb.Message.setOneofField(this, 5, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasF32 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double f64 = 6;
 * @return {number}
 */
proto.viot.Variable.prototype.getF64 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setF64 = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearF64 = function() {
  return jspb.Message.setOneofField(this, 6, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasF64 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool bol = 7;
 * @return {boolean}
 */
proto.viot.Variable.prototype.getBol = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setBol = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearBol = function() {
  return jspb.Message.setOneofField(this, 7, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasBol = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string str = 8;
 * @return {string}
 */
proto.viot.Variable.prototype.getStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setStr = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearStr = function() {
  return jspb.Message.setOneofField(this, 8, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasStr = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes bin = 9;
 * @return {!(string|Uint8Array)}
 */
proto.viot.Variable.prototype.getBin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes bin = 9;
 * This is a type-conversion wrapper around `getBin()`
 * @return {string}
 */
proto.viot.Variable.prototype.getBin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBin()));
};


/**
 * optional bytes bin = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBin()`
 * @return {!Uint8Array}
 */
proto.viot.Variable.prototype.getBin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBin()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.setBin = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearBin = function() {
  return jspb.Message.setOneofField(this, 9, proto.viot.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasBin = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Any any = 10;
 * @return {?proto.google.protobuf.Any}
 */
proto.viot.Variable.prototype.getAny = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 10));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.viot.Variable} returns this
*/
proto.viot.Variable.prototype.setAny = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.viot.Variable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.viot.Variable} returns this
 */
proto.viot.Variable.prototype.clearAny = function() {
  return this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.viot.Variable.prototype.hasAny = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.ScriptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.ScriptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.ScriptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.ScriptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.ScriptRequest}
 */
proto.viot.ScriptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.ScriptRequest;
  return proto.viot.ScriptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.ScriptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.ScriptRequest}
 */
proto.viot.ScriptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.ScriptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.ScriptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.ScriptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.ScriptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.SelectRequest}
 */
proto.viot.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.SelectRequest;
  return proto.viot.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.SelectRequest}
 */
proto.viot.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.SelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.InsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.InsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.InsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.InsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.InsertRequest}
 */
proto.viot.InsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.InsertRequest;
  return proto.viot.InsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.InsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.InsertRequest}
 */
proto.viot.InsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.InsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.InsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.InsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.InsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.UpdateRequest}
 */
proto.viot.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.UpdateRequest;
  return proto.viot.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.UpdateRequest}
 */
proto.viot.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.viot.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.viot.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.viot.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.viot.DeleteRequest}
 */
proto.viot.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.viot.DeleteRequest;
  return proto.viot.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.viot.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.viot.DeleteRequest}
 */
proto.viot.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.viot.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.viot.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.viot.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.viot.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.viot.Type = {
  ANY: 0,
  INT32: 1,
  INT64: 2,
  FLOAT: 3,
  DOUBLE: 4,
  BOOL: 5,
  STRING: 6,
  BYTES: 7,
  OBJECT: 8
};

goog.object.extend(exports, proto.viot);
