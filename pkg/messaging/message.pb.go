// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/messaging/message.proto

package messaging

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Message represents a message emitted by the viot adapters layer.
type Message struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Subtopic             string   `protobuf:"bytes,2,opt,name=subtopic,proto3" json:"subtopic,omitempty"`
	Publisher            string   `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Protocol             string   `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Payload              []byte   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Qos                  int32    `protobuf:"varint,6,opt,name=qos,proto3" json:"qos,omitempty"`
	Retain               bool     `protobuf:"varint,7,opt,name=retain,proto3" json:"retain,omitempty"`
	Created              int64    `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e29d24c44e4762, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Message) GetSubtopic() string {
	if m != nil {
		return m.Subtopic
	}
	return ""
}

func (m *Message) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *Message) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *Message) GetRetain() bool {
	if m != nil {
		return m.Retain
	}
	return false
}

func (m *Message) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type ToRuleEngineMsg struct {
	TenantId             string   `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	TbMsg                []byte   `protobuf:"bytes,2,opt,name=tbMsg,proto3" json:"tbMsg,omitempty"`
	RelationTypes        []string `protobuf:"bytes,3,rep,name=relationTypes,proto3" json:"relationTypes,omitempty"`
	FailureMessage       string   `protobuf:"bytes,4,opt,name=failureMessage,proto3" json:"failureMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToRuleEngineMsg) Reset()         { *m = ToRuleEngineMsg{} }
func (m *ToRuleEngineMsg) String() string { return proto.CompactTextString(m) }
func (*ToRuleEngineMsg) ProtoMessage()    {}
func (*ToRuleEngineMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e29d24c44e4762, []int{1}
}
func (m *ToRuleEngineMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToRuleEngineMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToRuleEngineMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToRuleEngineMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToRuleEngineMsg.Merge(m, src)
}
func (m *ToRuleEngineMsg) XXX_Size() int {
	return m.Size()
}
func (m *ToRuleEngineMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ToRuleEngineMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ToRuleEngineMsg proto.InternalMessageInfo

func (m *ToRuleEngineMsg) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *ToRuleEngineMsg) GetTbMsg() []byte {
	if m != nil {
		return m.TbMsg
	}
	return nil
}

func (m *ToRuleEngineMsg) GetRelationTypes() []string {
	if m != nil {
		return m.RelationTypes
	}
	return nil
}

func (m *ToRuleEngineMsg) GetFailureMessage() string {
	if m != nil {
		return m.FailureMessage
	}
	return ""
}

type TbMsgMetaDataProto struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TbMsgMetaDataProto) Reset()         { *m = TbMsgMetaDataProto{} }
func (m *TbMsgMetaDataProto) String() string { return proto.CompactTextString(m) }
func (*TbMsgMetaDataProto) ProtoMessage()    {}
func (*TbMsgMetaDataProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e29d24c44e4762, []int{2}
}
func (m *TbMsgMetaDataProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMsgMetaDataProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMsgMetaDataProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMsgMetaDataProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMsgMetaDataProto.Merge(m, src)
}
func (m *TbMsgMetaDataProto) XXX_Size() int {
	return m.Size()
}
func (m *TbMsgMetaDataProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMsgMetaDataProto.DiscardUnknown(m)
}

var xxx_messageInfo_TbMsgMetaDataProto proto.InternalMessageInfo

func (m *TbMsgMetaDataProto) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type TbMsgProto struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RelationType         string              `protobuf:"bytes,2,opt,name=relationType,proto3" json:"relationType,omitempty"`
	EntityType           string              `protobuf:"bytes,3,opt,name=entityType,proto3" json:"entityType,omitempty"`
	EntityId             string              `protobuf:"bytes,4,opt,name=entityId,proto3" json:"entityId,omitempty"`
	RuleChainId          string              `protobuf:"bytes,5,opt,name=ruleChainId,proto3" json:"ruleChainId,omitempty"`
	RuleNodeId           string              `protobuf:"bytes,6,opt,name=ruleNodeId,proto3" json:"ruleNodeId,omitempty"`
	ClusterPartition     int64               `protobuf:"varint,7,opt,name=clusterPartition,proto3" json:"clusterPartition,omitempty"`
	MetaData             *TbMsgMetaDataProto `protobuf:"bytes,8,opt,name=metaData,proto3" json:"metaData,omitempty"`
	DataType             int32               `protobuf:"varint,9,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Data                 string              `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Ts                   int64               `protobuf:"varint,11,opt,name=ts,proto3" json:"ts,omitempty"`
	RuleNodeExecCounter  int32               `protobuf:"varint,12,opt,name=ruleNodeExecCounter,proto3" json:"ruleNodeExecCounter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TbMsgProto) Reset()         { *m = TbMsgProto{} }
func (m *TbMsgProto) String() string { return proto.CompactTextString(m) }
func (*TbMsgProto) ProtoMessage()    {}
func (*TbMsgProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5e29d24c44e4762, []int{3}
}
func (m *TbMsgProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMsgProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMsgProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMsgProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMsgProto.Merge(m, src)
}
func (m *TbMsgProto) XXX_Size() int {
	return m.Size()
}
func (m *TbMsgProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMsgProto.DiscardUnknown(m)
}

var xxx_messageInfo_TbMsgProto proto.InternalMessageInfo

func (m *TbMsgProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbMsgProto) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *TbMsgProto) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *TbMsgProto) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *TbMsgProto) GetRuleChainId() string {
	if m != nil {
		return m.RuleChainId
	}
	return ""
}

func (m *TbMsgProto) GetRuleNodeId() string {
	if m != nil {
		return m.RuleNodeId
	}
	return ""
}

func (m *TbMsgProto) GetClusterPartition() int64 {
	if m != nil {
		return m.ClusterPartition
	}
	return 0
}

func (m *TbMsgProto) GetMetaData() *TbMsgMetaDataProto {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *TbMsgProto) GetDataType() int32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *TbMsgProto) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *TbMsgProto) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *TbMsgProto) GetRuleNodeExecCounter() int32 {
	if m != nil {
		return m.RuleNodeExecCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "messaging.Message")
	proto.RegisterType((*ToRuleEngineMsg)(nil), "messaging.ToRuleEngineMsg")
	proto.RegisterType((*TbMsgMetaDataProto)(nil), "messaging.TbMsgMetaDataProto")
	proto.RegisterMapType((map[string]string)(nil), "messaging.TbMsgMetaDataProto.DataEntry")
	proto.RegisterType((*TbMsgProto)(nil), "messaging.TbMsgProto")
}

func init() { proto.RegisterFile("pkg/messaging/message.proto", fileDescriptor_e5e29d24c44e4762) }

var fileDescriptor_e5e29d24c44e4762 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xcd, 0x6e, 0xdb, 0x4c, 0xcb, 0x52, 0x19, 0x84, 0xac, 0x05, 0xaa, 0xa8, 0x42, 0x10,
	0x71, 0x28, 0x68, 0x39, 0xf0, 0x77, 0x63, 0xe9, 0xa1, 0x87, 0xa2, 0x95, 0xd5, 0x17, 0x70, 0x9b,
	0xa1, 0xb5, 0x36, 0xeb, 0x04, 0xdb, 0x41, 0xe4, 0x15, 0xb8, 0x71, 0x82, 0x47, 0xe2, 0xc8, 0x8d,
	0x2b, 0x2a, 0x2f, 0x82, 0xec, 0xfc, 0xd0, 0x65, 0x11, 0xb7, 0xf9, 0xbe, 0xf1, 0x4c, 0xe6, 0xfb,
	0x66, 0x02, 0x77, 0xf2, 0xf3, 0xcd, 0xe3, 0x0b, 0x34, 0x46, 0x6c, 0xa4, 0x6a, 0x22, 0x9c, 0xe6,
	0x3a, 0xb3, 0x19, 0x0d, 0xdb, 0xc4, 0xe4, 0x07, 0x81, 0xde, 0xa2, 0x4a, 0x52, 0x06, 0xbd, 0xf5,
	0x56, 0x28, 0x85, 0x29, 0x23, 0x11, 0x89, 0x43, 0xde, 0x40, 0x7a, 0x0c, 0x7d, 0x53, 0xac, 0x6c,
	0x96, 0xcb, 0x35, 0xeb, 0xf8, 0x54, 0x8b, 0xe9, 0x5d, 0x08, 0xf3, 0x62, 0x95, 0x4a, 0xb3, 0x45,
	0xcd, 0x02, 0x9f, 0xfc, 0x43, 0xb8, 0x4a, 0xff, 0xcd, 0x75, 0x96, 0xb2, 0x83, 0xaa, 0xb2, 0xc1,
	0xee, 0x7b, 0xb9, 0x28, 0xd3, 0x4c, 0x24, 0xec, 0x30, 0x22, 0xf1, 0x90, 0x37, 0x90, 0x8e, 0x20,
	0x78, 0x9f, 0x19, 0xd6, 0x8d, 0x48, 0x7c, 0xc8, 0x5d, 0x48, 0x6f, 0x43, 0x57, 0xa3, 0x15, 0x52,
	0xb1, 0x5e, 0x44, 0xe2, 0x3e, 0xaf, 0x91, 0x9f, 0x59, 0xa3, 0xb0, 0x98, 0xb0, 0x7e, 0x44, 0xe2,
	0x80, 0x37, 0x70, 0xf2, 0x99, 0xc0, 0x8d, 0x65, 0xc6, 0x8b, 0x14, 0x67, 0x6a, 0x23, 0x15, 0x2e,
	0xcc, 0xc6, 0x4d, 0x63, 0x51, 0x09, 0x65, 0xe7, 0x49, 0x2d, 0xb1, 0xc5, 0xf4, 0x16, 0x1c, 0xda,
	0xd5, 0xc2, 0x6c, 0xbc, 0xc0, 0x21, 0xaf, 0x00, 0xbd, 0x0f, 0xd7, 0x35, 0xa6, 0xc2, 0xca, 0x4c,
	0x2d, 0xcb, 0x1c, 0x0d, 0x0b, 0xa2, 0x20, 0x0e, 0xf9, 0x65, 0x92, 0x3e, 0x80, 0xa3, 0x77, 0x42,
	0xa6, 0x85, 0xc6, 0xda, 0xcb, 0x5a, 0xeb, 0x5f, 0xec, 0xe4, 0x13, 0x01, 0xba, 0x74, 0x7d, 0x17,
	0x68, 0xc5, 0x1b, 0x61, 0xc5, 0x99, 0xdf, 0xc7, 0x2b, 0x38, 0x48, 0x84, 0x15, 0x8c, 0x44, 0x41,
	0x3c, 0x38, 0x79, 0x38, 0x6d, 0xd7, 0x33, 0xbd, 0xfa, 0x78, 0xea, 0xa2, 0x99, 0xb2, 0xba, 0xe4,
	0xbe, 0xe8, 0xf8, 0x19, 0x84, 0x2d, 0xe5, 0x8c, 0x3b, 0xc7, 0xb2, 0xd6, 0xe6, 0x42, 0x27, 0xeb,
	0x83, 0x48, 0x0b, 0xac, 0xf7, 0x56, 0x81, 0x97, 0x9d, 0xe7, 0x64, 0xf2, 0x25, 0x00, 0xf0, 0xfd,
	0xab, 0x21, 0x8e, 0xa0, 0x23, 0x1b, 0x57, 0x3a, 0x32, 0xa1, 0x13, 0x18, 0xee, 0x8b, 0xac, 0xeb,
	0x2f, 0x71, 0x74, 0x0c, 0x80, 0xca, 0x4a, 0x5b, 0xfa, 0x17, 0xd5, 0xf2, 0xf7, 0x18, 0xe7, 0x77,
	0x85, 0xe6, 0x49, 0xb3, 0xfd, 0x06, 0xd3, 0x08, 0x06, 0xba, 0x48, 0xf1, 0x74, 0x2b, 0xa4, 0x9a,
	0x57, 0x17, 0x10, 0xf2, 0x7d, 0xca, 0x75, 0x77, 0xf0, 0x6d, 0x96, 0xe0, 0x3c, 0xf1, 0xc7, 0x10,
	0xf2, 0x3d, 0x86, 0x3e, 0x82, 0xd1, 0x3a, 0x2d, 0x8c, 0x45, 0x7d, 0x26, 0xb4, 0x95, 0x6e, 0x2a,
	0x7f, 0x1d, 0x01, 0xbf, 0xc2, 0xd3, 0x17, 0xd0, 0xbf, 0xa8, 0x6d, 0xf4, 0x87, 0x32, 0x38, 0xb9,
	0xf7, 0x5f, 0x9b, 0x79, 0xfb, 0xdc, 0x89, 0x70, 0x46, 0x7b, 0x89, 0xa1, 0xbf, 0xc8, 0x16, 0x53,
	0x5a, 0x6f, 0x0e, 0xfc, 0x70, 0x3e, 0x76, 0x46, 0x5a, 0xc3, 0x06, 0x7e, 0x90, 0x8e, 0x35, 0xf4,
	0x09, 0xdc, 0x6c, 0x86, 0x9e, 0x7d, 0xc4, 0xf5, 0x69, 0x56, 0x28, 0x8b, 0x9a, 0x0d, 0x7d, 0xab,
	0x7f, 0xa5, 0x5e, 0x8f, 0xbe, 0xed, 0xc6, 0xe4, 0xfb, 0x6e, 0x4c, 0x7e, 0xee, 0xc6, 0xe4, 0xeb,
	0xaf, 0xf1, 0xb5, 0x55, 0xd7, 0xff, 0x34, 0x4f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x7e,
	0xfc, 0x33, 0xd7, 0x03, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Created != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x40
	}
	if m.Retain {
		i--
		if m.Retain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Qos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subtopic) > 0 {
		i -= len(m.Subtopic)
		copy(dAtA[i:], m.Subtopic)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Subtopic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ToRuleEngineMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToRuleEngineMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToRuleEngineMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FailureMessage) > 0 {
		i -= len(m.FailureMessage)
		copy(dAtA[i:], m.FailureMessage)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FailureMessage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RelationTypes) > 0 {
		for iNdEx := len(m.RelationTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelationTypes[iNdEx])
			copy(dAtA[i:], m.RelationTypes[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.RelationTypes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TbMsg) > 0 {
		i -= len(m.TbMsg)
		copy(dAtA[i:], m.TbMsg)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TbMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMsgMetaDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMsgMetaDataProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMsgMetaDataProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbMsgProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMsgProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMsgProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RuleNodeExecCounter != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RuleNodeExecCounter))
		i--
		dAtA[i] = 0x60
	}
	if m.Ts != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x52
	}
	if m.DataType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x48
	}
	if m.MetaData != nil {
		{
			size, err := m.MetaData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ClusterPartition != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ClusterPartition))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RuleNodeId) > 0 {
		i -= len(m.RuleNodeId)
		copy(dAtA[i:], m.RuleNodeId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RuleNodeId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RuleChainId) > 0 {
		i -= len(m.RuleChainId)
		copy(dAtA[i:], m.RuleChainId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RuleChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EntityType) > 0 {
		i -= len(m.EntityType)
		copy(dAtA[i:], m.EntityType)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EntityType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RelationType) > 0 {
		i -= len(m.RelationType)
		copy(dAtA[i:], m.RelationType)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RelationType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Subtopic)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Qos != 0 {
		n += 1 + sovMessage(uint64(m.Qos))
	}
	if m.Retain {
		n += 2
	}
	if m.Created != 0 {
		n += 1 + sovMessage(uint64(m.Created))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToRuleEngineMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TbMsg)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.RelationTypes) > 0 {
		for _, s := range m.RelationTypes {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.FailureMessage)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMsgMetaDataProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMsgProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RelationType)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.EntityType)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RuleChainId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RuleNodeId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ClusterPartition != 0 {
		n += 1 + sovMessage(uint64(m.ClusterPartition))
	}
	if m.MetaData != nil {
		l = m.MetaData.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovMessage(uint64(m.DataType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovMessage(uint64(m.Ts))
	}
	if m.RuleNodeExecCounter != 0 {
		n += 1 + sovMessage(uint64(m.RuleNodeExecCounter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Retain = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToRuleEngineMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToRuleEngineMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToRuleEngineMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TbMsg = append(m.TbMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.TbMsg == nil {
				m.TbMsg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationTypes = append(m.RelationTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMsgMetaDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMsgMetaDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMsgMetaDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMsgProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMsgProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMsgProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterPartition", wireType)
			}
			m.ClusterPartition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterPartition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = &TbMsgMetaDataProto{}
			}
			if err := m.MetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleNodeExecCounter", wireType)
			}
			m.RuleNodeExecCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleNodeExecCounter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
